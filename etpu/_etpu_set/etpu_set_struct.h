/* This file is auto-generated by the ASH WARE ETEC Linker. */
/* It contains useful information for host-CPU side driver code */
/*    !!!   DO NOT EDIT THIS FILE   !!! */
/* Copyright (C) 2015 ASH WARE, Inc. */

#ifndef __etpu_set_struct_H
#define __etpu_set_struct_H


/* data structure (map) of all non-24-bit GLOBAL data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_sint32				_Global_error_data;
} etpu_if_GLOBAL_DATA;
#define etpu_if_GLOBAL_DATA_EXPECTED_SIZE 4


/* data structure (map) of all non-24-bit SPI_slave CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	union {
		etpu_if_uint8			_UNIT;
		struct {
#if defined(MSB_BITFIELD_ORDER)
			etpu_if_uint8 : 6;
			etpu_if_uint8		_CPOL : 1;
			etpu_if_uint8		_use_TCR1 : 1;
#elif defined(LSB_BITFIELD_ORDER)
			etpu_if_uint8		_use_TCR1 : 1;
			etpu_if_uint8		_CPOL : 1;
			etpu_if_uint8 : 6;
#else
#error Users of auto-struct must define either MSB_BITFIELD_ORDER or LSB_BITFIELD_ORDER
#endif
		} _BF;
	} _BF_UNIT_0000;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_sint8				_bit_count;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	etpu_if_sint8				_MISO_chan;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_sint8				_selected_flag;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
} etpu_if_SPI_slave_CHANNEL_FRAME;
#define etpu_if_SPI_slave_CHANNEL_FRAME_EXPECTED_SIZE 24


/* data structure of all 24-bit SPI_slave CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				_data_out_reg;
	/* 0x0004 */
	etpu_if_uint32				_data_in_reg;
	/* 0x0008 */
	etpu_if_sint32				_timeout;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
} etpu_if_SPI_slave_CHANNEL_FRAME_PSE;
#define etpu_if_SPI_slave_CHANNEL_FRAME_PSE_EXPECTED_SIZE 24


/* data structure of all signed 24-bit SPI_slave CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_sint32				_timeout;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
} etpu_if_SPI_slave_CHANNEL_FRAME_signedPSE;
#define etpu_if_SPI_slave_CHANNEL_FRAME_signedPSE_EXPECTED_SIZE 24


/* data structure of all unsigned 24-bit SPI_slave CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32				_data_out_reg;
	/* 0x0004 */
	etpu_if_uint32				_data_in_reg;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
} etpu_if_SPI_slave_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_SPI_slave_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 24


/* data structure (map) of all non-24-bit SPI_master CHANNEL FRAME data */
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	union {
		etpu_if_uint8			_UNIT;
		struct {
#if defined(MSB_BITFIELD_ORDER)
			etpu_if_uint8 : 7;
			etpu_if_uint8		_CPOL : 1;
#elif defined(LSB_BITFIELD_ORDER)
			etpu_if_uint8		_CPOL : 1;
			etpu_if_uint8 : 7;
#else
#error Users of auto-struct must define either MSB_BITFIELD_ORDER or LSB_BITFIELD_ORDER
#endif
		} _BF;
	} _BF_UNIT_0000;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0004 */
	etpu_if_sint8				_bit_count;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x0008 */
	etpu_if_uint8				_slave_select_chan;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	etpu_if_uint8 : 8;
	/* 0x000c */
	etpu_if_uint8				_slave_select_chan_list[4];
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_SPI_master_CHANNEL_FRAME;
#define etpu_if_SPI_master_CHANNEL_FRAME_EXPECTED_SIZE 32


/* data structure of all 24-bit SPI_master CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: it is recommended that 24-bit data be accessed via the separate */
/* signed and unsigned PSE data structures.  Unsigned 24-bit reads must have */
/* the upper 8 bits of the resulting 32-bit word ANDed to 0. */
typedef struct
{
	/* 0x0000 */
	etpu_if_sint32				_half_period;
	/* 0x0004 */
	etpu_if_uint32				_data_out_reg;
	/* 0x0008 */
	etpu_if_uint32				_data_in_reg;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_sint32				_slave_select_delay;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_SPI_master_CHANNEL_FRAME_PSE;
#define etpu_if_SPI_master_CHANNEL_FRAME_PSE_EXPECTED_SIZE 32


/* data structure of all signed 24-bit SPI_master CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
typedef struct
{
	/* 0x0000 */
	etpu_if_sint32				_half_period;
	/* 0x0004 */
	etpu_if_uint32 : 32;
	/* 0x0008 */
	etpu_if_uint32 : 32;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_sint32				_slave_select_delay;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_SPI_master_CHANNEL_FRAME_signedPSE;
#define etpu_if_SPI_master_CHANNEL_FRAME_signedPSE_EXPECTED_SIZE 32


/* data structure of all unsigned 24-bit SPI_master CHANNEL FRAME data (meant to be accessed via PSE mirror)*/
/* unnamed bit-fields are used to fill any gaps in the data map */
/* bitfield access generates read-modify-write code (non-coherent), */
/* so if this is an issue, access bitfields via their unit instead. */
/* NOTE: when an unsigned 24-bit parameter is read via the PSE (as an */
/* unsigned 32-bit integer), the upper 8 bits must be ANDed off to undo */
/* any potential sign extension. */
typedef struct
{
	/* 0x0000 */
	etpu_if_uint32 : 32;
	/* 0x0004 */
	etpu_if_uint32				_data_out_reg;
	/* 0x0008 */
	etpu_if_uint32				_data_in_reg;
	/* 0x000c */
	etpu_if_uint32 : 32;
	/* 0x0010 */
	etpu_if_uint32 : 32;
	/* 0x0014 */
	etpu_if_uint32 : 32;
	/* 0x0018 */
	etpu_if_uint32 : 32;
	/* 0x001c */
	etpu_if_uint32 : 32;
} etpu_if_SPI_master_CHANNEL_FRAME_unsignedPSE;
#define etpu_if_SPI_master_CHANNEL_FRAME_unsignedPSE_EXPECTED_SIZE 32


#endif /* __etpu_set_struct_H */
